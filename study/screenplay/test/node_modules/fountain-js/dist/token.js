"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActionToken = exports.LineBreakToken = exports.PageBreakToken = exports.BoneyardToken = exports.NoteToken = exports.SynopsisToken = exports.SectionToken = exports.LyricsToken = exports.DualDialogueEndToken = exports.DualDialogueBeginToken = exports.ParentheticalToken = exports.DialogueEndToken = exports.DialogueToken = exports.CharacterToken = exports.DialogueBeginToken = exports.DialogueBlock = exports.TransitionToken = exports.CenteredToken = exports.SceneHeadingToken = exports.TitlePageToken = exports.TitlePageBlock = void 0;
const rules_1 = require("./rules");
class TitlePageBlock {
    constructor(line) {
        this.tokens = [];
        const match = line.replace(rules_1.rules.title_page, '\n$1').split(rules_1.rules.splitter).reverse();
        this.tokens = match.reduce((previous, item) => new TitlePageToken(item).addTo(previous), []);
    }
    addTo(tokens) {
        return [...tokens, ...this.tokens];
    }
    static matchedBy(line) {
        return rules_1.rules.title_page.test(line);
    }
}
exports.TitlePageBlock = TitlePageBlock;
class TitlePageToken {
    constructor(item) {
        this.is_title = true;
        const pair = item.replace(rules_1.rules.cleaner, '').split(/\:\n*/);
        this.type = pair[0].trim().toLowerCase().replace(' ', '_');
        this.text = pair[1].trim();
    }
    addTo(tokens) {
        return [...tokens, this];
    }
}
exports.TitlePageToken = TitlePageToken;
class SceneHeadingToken {
    constructor(line) {
        this.type = 'scene_heading';
        const match = line.match(rules_1.rules.scene_heading);
        this.text = match[1] || match[2];
        const meta = this.text.match(rules_1.rules.scene_number);
        if (meta) {
            this.scene_number = meta[2];
            this.text = this.text.replace(rules_1.rules.scene_number, '');
        }
    }
    addTo(tokens) {
        return [...tokens, this];
    }
    static matchedBy(line) {
        return rules_1.rules.scene_heading.test(line);
    }
}
exports.SceneHeadingToken = SceneHeadingToken;
class CenteredToken {
    constructor(line) {
        this.type = 'centered';
        const match = line.match(rules_1.rules.centered);
        this.text = match[0].replace(/ *[><] */g, '');
    }
    addTo(tokens) {
        return [...tokens, this];
    }
    static matchedBy(line) {
        return rules_1.rules.centered.test(line);
    }
}
exports.CenteredToken = CenteredToken;
class TransitionToken {
    constructor(line) {
        this.type = 'transition';
        const match = line.match(rules_1.rules.transition);
        this.text = match[1] || match[2];
    }
    addTo(tokens) {
        return [...tokens, this];
    }
    static matchedBy(line) {
        return rules_1.rules.transition.test(line);
    }
}
exports.TransitionToken = TransitionToken;
class DialogueBlock {
    constructor(line, dual) {
        this.tokens = [];
        const match = line.match(rules_1.rules.dialogue);
        let name = match[1];
        // iterating from the bottom up, so push dialogue blocks in reverse order
        const isDualDialogue = !!match[2];
        if (isDualDialogue) {
            this.tokens.push(new DualDialogueEndToken());
        }
        this.tokens.push(new DialogueEndToken());
        const parts = match[3].split(/\n/);
        let dialogue = parts.reduce((p, text = '') => {
            const lastIndex = p.length - 1;
            const previousToken = p[lastIndex];
            if (!text.length) {
                return p;
            }
            if (rules_1.rules.parenthetical.test(text)) {
                return [...p, new ParentheticalToken(text)];
            }
            if (rules_1.rules.lyrics.test(text)) {
                if (previousToken.type === 'lyrics') {
                    p[lastIndex].text =
                        `${previousToken.text}\n${text.replace(/^~/, '')}`;
                    return p;
                }
                else {
                    return [...p, new LyricsToken(text)];
                }
            }
            if (previousToken) {
                if (previousToken.type === 'dialogue') {
                    p[lastIndex].text = `${previousToken.text}\n${text}`;
                    return p;
                }
            }
            return [...p, new DialogueToken(text)];
        }, []).reverse();
        this.tokens.push(...dialogue);
        this.tokens.push(new CharacterToken(name.startsWith('@')
            ? name.replace(/^@/, '').trim()
            : name.trim()), new DialogueBeginToken(isDualDialogue ? 'right' : dual ? 'left' : undefined));
        if (dual) {
            this.tokens.push(new DualDialogueBeginToken());
        }
        this.dual = isDualDialogue;
    }
    addTo(tokens) {
        return [...tokens, ...this.tokens];
    }
    static matchedBy(line) {
        return rules_1.rules.dialogue.test(line);
    }
}
exports.DialogueBlock = DialogueBlock;
class DialogueBeginToken {
    constructor(dual) {
        this.type = 'dialogue_begin';
        this.dual = dual;
    }
    addTo(tokens) {
        return [...tokens, this];
    }
}
exports.DialogueBeginToken = DialogueBeginToken;
class CharacterToken {
    constructor(text) {
        this.type = 'character';
        this.text = text;
    }
    addTo(tokens) {
        return [...tokens, this];
    }
}
exports.CharacterToken = CharacterToken;
class DialogueToken {
    constructor(text) {
        this.type = 'dialogue';
        this.text = text;
    }
    addTo(tokens) {
        return [...tokens, this];
    }
}
exports.DialogueToken = DialogueToken;
class DialogueEndToken {
    constructor() {
        this.type = 'dialogue_end';
    }
    addTo(tokens) {
        return [...tokens, this];
    }
}
exports.DialogueEndToken = DialogueEndToken;
class ParentheticalToken {
    constructor(text) {
        this.type = 'parenthetical';
        this.text = text;
    }
    addTo(tokens) {
        return [...tokens, this];
    }
}
exports.ParentheticalToken = ParentheticalToken;
class DualDialogueBeginToken {
    constructor() {
        this.type = 'dual_dialogue_begin';
    }
    addTo(tokens) {
        return [...tokens, this];
    }
}
exports.DualDialogueBeginToken = DualDialogueBeginToken;
class DualDialogueEndToken {
    constructor() {
        this.type = 'dual_dialogue_end';
    }
    addTo(tokens) {
        return [...tokens, this];
    }
}
exports.DualDialogueEndToken = DualDialogueEndToken;
class LyricsToken {
    constructor(line) {
        this.type = 'lyrics';
        this.text = line.replace(/^~(?! )/gm, '');
    }
    addTo(tokens) {
        return [...tokens, this];
    }
    static matchedBy(line) {
        return rules_1.rules.lyrics.test(line);
    }
}
exports.LyricsToken = LyricsToken;
class SectionToken {
    constructor(line) {
        this.type = 'section';
        const match = line.match(rules_1.rules.section);
        this.text = match[2];
        this.depth = match[1].length;
    }
    addTo(tokens) {
        return [...tokens, this];
    }
    static matchedBy(line) {
        return rules_1.rules.section.test(line);
    }
}
exports.SectionToken = SectionToken;
class SynopsisToken {
    constructor(line) {
        this.type = 'synopsis';
        const match = line.match(rules_1.rules.synopsis);
        this.text = match[1];
    }
    addTo(tokens) {
        return [...tokens, this];
    }
    static matchedBy(line) {
        return rules_1.rules.synopsis.test(line);
    }
}
exports.SynopsisToken = SynopsisToken;
class NoteToken {
    constructor(line) {
        this.type = 'note';
        const match = line.match(rules_1.rules.note);
        this.text = match[1];
    }
    addTo(tokens) {
        return [...tokens, this];
    }
    static matchedBy(line) {
        return rules_1.rules.note.test(line);
    }
}
exports.NoteToken = NoteToken;
class BoneyardToken {
    constructor(line) {
        const match = line.match(rules_1.rules.boneyard);
        this.type = match[0][0] === '/' ? 'boneyard_begin' : 'boneyard_end';
    }
    addTo(tokens) {
        return [...tokens, this];
    }
    static matchedBy(line) {
        return rules_1.rules.boneyard.test(line);
    }
}
exports.BoneyardToken = BoneyardToken;
class PageBreakToken {
    constructor() {
        this.type = 'page_break';
    }
    addTo(tokens) {
        return [...tokens, this];
    }
    static matchedBy(line) {
        return rules_1.rules.page_break.test(line);
    }
}
exports.PageBreakToken = PageBreakToken;
class LineBreakToken {
    constructor() {
        this.type = 'line_break';
    }
    addTo(tokens) {
        return [...tokens, this];
    }
    static matchedBy(line) {
        return rules_1.rules.line_break.test(line);
    }
}
exports.LineBreakToken = LineBreakToken;
class ActionToken {
    constructor(line) {
        this.type = 'action';
        this.text = line.replace(/^!(?! )/gm, '');
    }
    addTo(tokens) {
        return [...tokens, this];
    }
}
exports.ActionToken = ActionToken;
//# sourceMappingURL=token.js.map